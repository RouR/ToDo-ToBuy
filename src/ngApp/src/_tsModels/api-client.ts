/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.3.0 (NJsonSchema v9.12.5.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "/";
    }

    /**
     * try login, get Jwt token
     * @param request (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiAccountLogin(request?: LoginRequest | null | undefined, api_version?: string | null | undefined): Observable<LoginResponse> {
        let url_ = this.baseUrl + "/api/Account/Login?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAccountLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAccountLogin(<any>response_);
                } catch (e) {
                    return <Observable<LoginResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<LoginResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiAccountLogin(response: HttpResponseBase): Observable<LoginResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LoginResponse.fromJS(resultData200) : new LoginResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResponse>(<any>null);
    }

    /**
     * register new user
     * @param request (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiAccountRegister(request?: RegisterRequest | null | undefined, api_version?: string | null | undefined): Observable<RegisterResponse> {
        let url_ = this.baseUrl + "/api/Account/Register?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAccountRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAccountRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiAccountRegister(response: HttpResponseBase): Observable<RegisterResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterResponse.fromJS(resultData200) : new RegisterResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterResponse>(<any>null);
    }

    /**
     * list to-do items with pagination
     * @param page (optional) 
     * @param pageSize (optional) 
     * @param orderBy (optional) 
     * @param asc (optional) 
     * @param filter_Text (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiTodoList(page?: number | null | undefined, pageSize?: number | null | undefined, orderBy?: string | null | undefined, asc?: boolean | null | undefined, filter_Text?: string | null | undefined, api_version?: string | null | undefined): Observable<ListTODOResponse> {
        let url_ = this.baseUrl + "/api/ToDo/List?";
        if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (orderBy !== undefined)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&"; 
        if (asc !== undefined)
            url_ += "Asc=" + encodeURIComponent("" + asc) + "&"; 
        if (filter_Text !== undefined)
            url_ += "Filter.Text=" + encodeURIComponent("" + filter_Text) + "&"; 
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiTodoList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiTodoList(<any>response_);
                } catch (e) {
                    return <Observable<ListTODOResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListTODOResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiTodoList(response: HttpResponseBase): Observable<ListTODOResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListTODOResponse.fromJS(resultData200) : new ListTODOResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListTODOResponse>(<any>null);
    }

    /**
     * load to-do-item
     * @param publicId (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiTodoGet(publicId?: string | null | undefined, api_version?: string | null | undefined): Observable<EditTODOResponse> {
        let url_ = this.baseUrl + "/api/ToDo/Get?";
        if (publicId !== undefined)
            url_ += "PublicId=" + encodeURIComponent("" + publicId) + "&"; 
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiTodoGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiTodoGet(<any>response_);
                } catch (e) {
                    return <Observable<EditTODOResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditTODOResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiTodoGet(response: HttpResponseBase): Observable<EditTODOResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditTODOResponse.fromJS(resultData200) : new EditTODOResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditTODOResponse>(<any>null);
    }

    /**
     * update to-do-item
     * @param request (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiTodoUpdate(request?: SaveTODORequest | null | undefined, api_version?: string | null | undefined): Observable<SaveTODOResponse> {
        let url_ = this.baseUrl + "/api/ToDo/Update?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiTodoUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiTodoUpdate(<any>response_);
                } catch (e) {
                    return <Observable<SaveTODOResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SaveTODOResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiTodoUpdate(response: HttpResponseBase): Observable<SaveTODOResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SaveTODOResponse.fromJS(resultData200) : new SaveTODOResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SaveTODOResponse>(<any>null);
    }

    /**
     * create new to-do-item
     * @param request (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiTodoCreate(request?: SaveTODORequest | null | undefined, api_version?: string | null | undefined): Observable<SaveTODOResponse> {
        let url_ = this.baseUrl + "/api/ToDo/Create?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiTodoCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiTodoCreate(<any>response_);
                } catch (e) {
                    return <Observable<SaveTODOResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SaveTODOResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiTodoCreate(response: HttpResponseBase): Observable<SaveTODOResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SaveTODOResponse.fromJS(resultData200) : new SaveTODOResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SaveTODOResponse>(<any>null);
    }

    /**
     * delete to-do-item
     * @param request (optional) 
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiTodoDelete(request?: DeleteTODORequest | null | undefined, api_version?: string | null | undefined): Observable<DeleteTODOResponse> {
        let url_ = this.baseUrl + "/api/ToDo/Delete?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiTodoDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiTodoDelete(<any>response_);
                } catch (e) {
                    return <Observable<DeleteTODOResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeleteTODOResponse>><any>_observableThrow(response_);
        }));
    }

    protected processApiTodoDelete(response: HttpResponseBase): Observable<DeleteTODOResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DeleteTODOResponse.fromJS(resultData200) : new DeleteTODOResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteTODOResponse>(<any>null);
    }

    /**
     * Some text from comments
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiValues(api_version?: string | null | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Values?";
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiValues(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiValues(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processApiValues(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    /**
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiValuesGet(id: number, api_version?: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Values/get/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiValuesGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiValuesGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processApiValuesGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * test auth
     * @param api_version (optional) The requested API version
     * @return Success
     */
    apiValuesPrivate(id: number, api_version?: string | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Values/private/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiValuesPrivate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiValuesPrivate(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processApiValuesPrivate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export class LoginRequest implements ILoginRequest {
    userName?: string | null;
    password?: string | null;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface ILoginRequest {
    userName?: string | null;
    password?: string | null;
}

export class LoginResponse implements ILoginResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: string | null;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        return data; 
    }
}

export interface ILoginResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: string | null;
}

export class RegisterRequest implements IRegisterRequest {
    userName!: string;
    password!: string;

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface IRegisterRequest {
    userName: string;
    password: string;
}

export class RegisterResponse implements IRegisterResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: string | null;
    validationErrors?: KeyValuePairOfStringAndString[] | null;

    constructor(data?: IRegisterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
            if (data["validationErrors"] && data["validationErrors"].constructor === Array) {
                this.validationErrors = [];
                for (let item of data["validationErrors"])
                    this.validationErrors.push(KeyValuePairOfStringAndString.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RegisterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        if (this.validationErrors && this.validationErrors.constructor === Array) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRegisterResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: string | null;
    validationErrors?: KeyValuePairOfStringAndString[] | null;
}

export class KeyValuePairOfStringAndString implements IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;

    constructor(data?: IKeyValuePairOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"] !== undefined ? data["key"] : <any>null;
            this.value = data["value"] !== undefined ? data["value"] : <any>null;
        }
    }

    static fromJS(data: any): KeyValuePairOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IKeyValuePairOfStringAndString {
    key?: string | null;
    value?: string | null;
}

export class ListTODOResponse implements IListTODOResponse {
    page?: number | null;
    pageSize?: number | null;
    totalItems?: number | null;
    items?: TodoPublicEntity[] | null;
    totalPages?: number | null;
    firstItem?: number | null;
    lastItem?: number | null;
    hasPreviousPage?: boolean | null;
    hasNextPage?: boolean | null;

    constructor(data?: IListTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["page"] !== undefined ? data["page"] : <any>null;
            this.pageSize = data["pageSize"] !== undefined ? data["pageSize"] : <any>null;
            this.totalItems = data["totalItems"] !== undefined ? data["totalItems"] : <any>null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TodoPublicEntity.fromJS(item));
            }
            this.totalPages = data["totalPages"] !== undefined ? data["totalPages"] : <any>null;
            this.firstItem = data["firstItem"] !== undefined ? data["firstItem"] : <any>null;
            this.lastItem = data["lastItem"] !== undefined ? data["lastItem"] : <any>null;
            this.hasPreviousPage = data["hasPreviousPage"] !== undefined ? data["hasPreviousPage"] : <any>null;
            this.hasNextPage = data["hasNextPage"] !== undefined ? data["hasNextPage"] : <any>null;
        }
    }

    static fromJS(data: any): ListTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page !== undefined ? this.page : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["totalItems"] = this.totalItems !== undefined ? this.totalItems : <any>null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalPages"] = this.totalPages !== undefined ? this.totalPages : <any>null;
        data["firstItem"] = this.firstItem !== undefined ? this.firstItem : <any>null;
        data["lastItem"] = this.lastItem !== undefined ? this.lastItem : <any>null;
        data["hasPreviousPage"] = this.hasPreviousPage !== undefined ? this.hasPreviousPage : <any>null;
        data["hasNextPage"] = this.hasNextPage !== undefined ? this.hasNextPage : <any>null;
        return data; 
    }
}

export interface IListTODOResponse {
    page?: number | null;
    pageSize?: number | null;
    totalItems?: number | null;
    items?: TodoPublicEntity[] | null;
    totalPages?: number | null;
    firstItem?: number | null;
    lastItem?: number | null;
    hasPreviousPage?: boolean | null;
    hasNextPage?: boolean | null;
}

export class TodoPublicEntity implements ITodoPublicEntity {
    title?: string | null;
    description?: string | null;
    publicId?: string | null;
    created?: moment.Moment | null;
    updated?: moment.Moment | null;

    constructor(data?: ITodoPublicEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.publicId = data["publicId"] !== undefined ? data["publicId"] : <any>null;
            this.created = data["created"] ? moment(data["created"].toString()) : <any>null;
            this.updated = data["updated"] ? moment(data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TodoPublicEntity {
        data = typeof data === 'object' ? data : {};
        let result = new TodoPublicEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["publicId"] = this.publicId !== undefined ? this.publicId : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>null;
        return data; 
    }
}

export interface ITodoPublicEntity {
    title?: string | null;
    description?: string | null;
    publicId?: string | null;
    created?: moment.Moment | null;
    updated?: moment.Moment | null;
}

export class EditTODOResponse implements IEditTODOResponse {
    title?: string | null;
    description?: string | null;
    publicId?: string | null;
    created?: moment.Moment | null;
    updated?: moment.Moment | null;

    constructor(data?: IEditTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.publicId = data["publicId"] !== undefined ? data["publicId"] : <any>null;
            this.created = data["created"] ? moment(data["created"].toString()) : <any>null;
            this.updated = data["updated"] ? moment(data["updated"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EditTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["publicId"] = this.publicId !== undefined ? this.publicId : <any>null;
        data["created"] = this.created ? this.created.toISOString() : <any>null;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>null;
        return data; 
    }
}

export interface IEditTODOResponse {
    title?: string | null;
    description?: string | null;
    publicId?: string | null;
    created?: moment.Moment | null;
    updated?: moment.Moment | null;
}

export class SaveTODORequest implements ISaveTODORequest {
    publicId?: string | null;
    title?: string | null;
    description?: string | null;

    constructor(data?: ISaveTODORequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicId = data["publicId"] !== undefined ? data["publicId"] : <any>null;
            this.title = data["title"] !== undefined ? data["title"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SaveTODORequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTODORequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId !== undefined ? this.publicId : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface ISaveTODORequest {
    publicId?: string | null;
    title?: string | null;
    description?: string | null;
}

export class SaveTODOResponse implements ISaveTODOResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: TodoPublicEntity | null;

    constructor(data?: ISaveTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.data = data["data"] ? TodoPublicEntity.fromJS(data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data; 
    }
}

export interface ISaveTODOResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: TodoPublicEntity | null;
}

export class DeleteTODORequest implements IDeleteTODORequest {
    publicId?: string | null;

    constructor(data?: IDeleteTODORequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicId = data["publicId"] !== undefined ? data["publicId"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteTODORequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTODORequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId !== undefined ? this.publicId : <any>null;
        return data; 
    }
}

export interface IDeleteTODORequest {
    publicId?: string | null;
}

export class DeleteTODOResponse implements IDeleteTODOResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: boolean | null;

    constructor(data?: IDeleteTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["hasError"] !== undefined ? data["hasError"] : <any>null;
            this.message = data["message"] !== undefined ? data["message"] : <any>null;
            this.data = data["data"] !== undefined ? data["data"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        return data; 
    }
}

export interface IDeleteTODOResponse {
    hasError?: boolean | null;
    message?: string | null;
    data?: boolean | null;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
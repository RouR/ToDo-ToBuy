/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.3.0 (NJsonSchema v9.12.5.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class DeleteTODORequest implements IDeleteTODORequest {
    publicId!: string;

    constructor(data?: IDeleteTODORequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicId = data["PublicId"];
        }
    }

    static fromJS(data: any): DeleteTODORequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTODORequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PublicId"] = this.publicId;
        return data; 
    }
}

export interface IDeleteTODORequest {
    publicId: string;
}

export class DeleteTODOResponse implements IDeleteTODOResponse {
    hasError!: boolean;
    message?: string | undefined;
    data!: boolean;

    constructor(data?: IDeleteTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["HasError"];
            this.message = data["Message"];
            this.data = data["Data"];
        }
    }

    static fromJS(data: any): DeleteTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasError"] = this.hasError;
        data["Message"] = this.message;
        data["Data"] = this.data;
        return data; 
    }
}

export interface IDeleteTODOResponse {
    hasError: boolean;
    message?: string | undefined;
    data: boolean;
}

export class ListTODORequest implements IListTODORequest {
    page!: number;
    pageSize!: number;

    constructor(data?: IListTODORequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["Page"];
            this.pageSize = data["PageSize"];
        }
    }

    static fromJS(data: any): ListTODORequest {
        data = typeof data === 'object' ? data : {};
        let result = new ListTODORequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page;
        data["PageSize"] = this.pageSize;
        return data; 
    }
}

export interface IListTODORequest {
    page: number;
    pageSize: number;
}

export class PaginationOfTodoEntity implements IPaginationOfTodoEntity {
    page!: number;
    pageSize!: number;
    totalItems!: number;
    items?: TodoEntity[] | undefined;
    totalPages!: number;
    firstItem!: number;
    lastItem!: number;
    hasPreviousPage!: boolean;
    hasNextPage!: boolean;

    constructor(data?: IPaginationOfTodoEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.page = data["Page"];
            this.pageSize = data["PageSize"];
            this.totalItems = data["TotalItems"];
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(TodoEntity.fromJS(item));
            }
            this.totalPages = data["TotalPages"];
            this.firstItem = data["FirstItem"];
            this.lastItem = data["LastItem"];
            this.hasPreviousPage = data["HasPreviousPage"];
            this.hasNextPage = data["HasNextPage"];
        }
    }

    static fromJS(data: any): PaginationOfTodoEntity {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationOfTodoEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Page"] = this.page;
        data["PageSize"] = this.pageSize;
        data["TotalItems"] = this.totalItems;
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        data["TotalPages"] = this.totalPages;
        data["FirstItem"] = this.firstItem;
        data["LastItem"] = this.lastItem;
        data["HasPreviousPage"] = this.hasPreviousPage;
        data["HasNextPage"] = this.hasNextPage;
        return data; 
    }
}

export interface IPaginationOfTodoEntity {
    page: number;
    pageSize: number;
    totalItems: number;
    items?: TodoEntity[] | undefined;
    totalPages: number;
    firstItem: number;
    lastItem: number;
    hasPreviousPage: boolean;
    hasNextPage: boolean;
}

export class ListTODOResponse extends PaginationOfTodoEntity implements IListTODOResponse {

    constructor(data?: IListTODOResponse) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
        }
    }

    static fromJS(data: any): ListTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IListTODOResponse extends IPaginationOfTodoEntity {
}

export abstract class DBEntity implements IDBEntity {
    publicId!: string;
    created!: Date;
    updated!: Date;
    isDeleted!: boolean;

    constructor(data?: IDBEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicId = data["PublicId"];
            this.created = data["Created"] ? new Date(data["Created"].toString()) : <any>undefined;
            this.updated = data["Updated"] ? new Date(data["Updated"].toString()) : <any>undefined;
            this.isDeleted = data["IsDeleted"];
        }
    }

    static fromJS(data: any): DBEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DBEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["PublicId"] = this.publicId;
        data["Created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["Updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["IsDeleted"] = this.isDeleted;
        return data; 
    }
}

export interface IDBEntity {
    publicId: string;
    created: Date;
    updated: Date;
    isDeleted: boolean;
}

export class TodoEntity extends DBEntity implements ITodoEntity {
    title?: string | undefined;
    description?: string | undefined;
    userId!: string;

    constructor(data?: ITodoEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.title = data["Title"];
            this.description = data["Description"];
            this.userId = data["UserId"];
        }
    }

    static fromJS(data: any): TodoEntity {
        data = typeof data === 'object' ? data : {};
        let result = new TodoEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Description"] = this.description;
        data["UserId"] = this.userId;
        super.toJSON(data);
        return data; 
    }
}

export interface ITodoEntity extends IDBEntity {
    title?: string | undefined;
    description?: string | undefined;
    userId: string;
}

export class SaveTODORequest implements ISaveTODORequest {
    title?: string | undefined;
    description?: string | undefined;

    constructor(data?: ISaveTODORequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["Title"];
            this.description = data["Description"];
        }
    }

    static fromJS(data: any): SaveTODORequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTODORequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Description"] = this.description;
        return data; 
    }
}

export interface ISaveTODORequest {
    title?: string | undefined;
    description?: string | undefined;
}

export class SaveTODOResponse implements ISaveTODOResponse {
    hasError!: boolean;
    message?: string | undefined;
    data?: TodoEntity | undefined;

    constructor(data?: ISaveTODOResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["HasError"];
            this.message = data["Message"];
            this.data = data["Data"] ? TodoEntity.fromJS(data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SaveTODOResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTODOResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasError"] = this.hasError;
        data["Message"] = this.message;
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISaveTODOResponse {
    hasError: boolean;
    message?: string | undefined;
    data?: TodoEntity | undefined;
}

export class LoginRequest implements ILoginRequest {
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["UserName"];
            this.password = data["Password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["UserName"] = this.userName;
        data["Password"] = this.password;
        return data; 
    }
}

export interface ILoginRequest {
    userName?: string | undefined;
    password?: string | undefined;
}

export class LoginResponse implements ILoginResponse {
    hasError!: boolean;
    message?: string | undefined;
    data?: string | undefined;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["HasError"];
            this.message = data["Message"];
            this.data = data["Data"];
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasError"] = this.hasError;
        data["Message"] = this.message;
        data["Data"] = this.data;
        return data; 
    }
}

export interface ILoginResponse {
    hasError: boolean;
    message?: string | undefined;
    data?: string | undefined;
}

export class RegisterRequest implements IRegisterRequest {

    constructor(data?: IRegisterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
        }
    }

    static fromJS(data: any): RegisterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IRegisterRequest {
}

export class RegisterResponse implements IRegisterResponse {
    hasError!: boolean;
    message?: string | undefined;
    data!: string;

    constructor(data?: IRegisterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hasError = data["HasError"];
            this.message = data["Message"];
            this.data = data["Data"];
        }
    }

    static fromJS(data: any): RegisterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HasError"] = this.hasError;
        data["Message"] = this.message;
        data["Data"] = this.data;
        return data; 
    }
}

export interface IRegisterResponse {
    hasError: boolean;
    message?: string | undefined;
    data: string;
}
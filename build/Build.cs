using System;
using System.Globalization;
using System.IO;
using System.Linq;
using Nuke.Common;
using Nuke.Common.BuildServers;
using Nuke.Common.Git;
using Nuke.Common.Tools.GitVersion;
using Nuke.Common.Tools.Nunit;
using Nuke.Common.Tools.ReportGenerator;
using Nuke.Common.Tools.Xunit;
using static Nuke.Common.EnvironmentInfo;
using static Nuke.Common.IO.FileSystemTasks;
using static Nuke.Common.IO.PathConstruction;
using static Nuke.Common.Tools.DotNet.DotNetTasks;

//https://github.com/nuke-build/nuke
class Build : NukeBuild
{
    //powershell -ExecutionPolicy ByPass -File ./build.ps1 -target clean

    // Console application entry point. Also defines the default target.
    public static int Main () => Execute<Build>(x => x.Compile);

    // Auto-injection fields:

    [GitVersion] readonly GitVersion GitVersion;
    // Semantic versioning. Must have 'GitVersion.CommandLine' referenced.

    // [GitRepository] readonly GitRepository GitRepository;
    // Parses origin, branch name and head from git config.
    
    // [Parameter] readonly string MyGetApiKey;
    // Returns command-line arguments and environment variables.
    
    // [Solution] readonly Solution Solution;
    // Provides access to the structure of the solution.

    Target Clean => _ => _
            //.OnlyWhen(() => false) // Disabled for safety.
            .Executes(() =>
            {
                DeleteDirectories(GlobDirectories(SourceDirectory, "**/bin", "**/obj"));
                EnsureCleanDirectory(OutputDirectory);
            });

    Target Restore => _ => _
            .DependsOn(Clean)
            .Executes(() =>
            {
                DotNetRestore(s => DefaultDotNetRestore);
            });

    Target Compile => _ => _
            .DependsOn(Restore)
            .DependsOn(MyTarget)
            .Executes(() =>
            {
                DotNetBuild(s => DefaultDotNetBuild);
            });

    //Target Test => _ => _
    //    .DependsOn(Compile)
    //    .Executes(() =>
    //    {
    //        var nunitSettings = new Nunit3Settings()
    //            .AddTargetAssemblies(GlobFiles(SolutionDirectory, $"*/bin/{Configuration}/net4*/Nuke.*.Tests.dll").NotEmpty())
    //            .AddResultReport(Xunit2ResultFormat.Xml, OutputDirectory / "tests.xml");

    //        if (IsWin)
    //        {
    //            OpenCover(s => DefaultOpenCover
    //                .SetOutput(OutputDirectory / "coverage.xml")
    //                .SetTargetSettings(xunitSettings)
    //                .SetSearchDirectories(xunitSettings.TargetAssemblyWithConfigs.Select(x => Path.GetDirectoryName(x.Key)))
    //                .AddFilters("-[Nuke.Common]Nuke.Core.*"));

    //            ReportGenerator(s => s
    //                .AddReports(OutputDirectory / "coverage.xml")
    //                .AddReportTypes(ReportTypes.Html)
    //                .SetTargetDirectory(OutputDirectory / "coverage"));
    //        }
    //        else
    //            Nunit3(s => xunitSettings);
    //    });


    public readonly AppVeyor AppVeyor;
    public readonly Travis Travis;
    Target MyTarget => _ => _
        // other fluent calls
        .Executes(() =>
        {
            Console.WriteLine("Run custom target - MyTarget!");
            Console.WriteLine("IsWin " + IsWin);
            Console.WriteLine("IsUnix " + IsUnix);

            if(AppVeyor != null)
                Console.WriteLine("Run inside AppVeyor build server.");

            if(Travis != null)
                Console.WriteLine("Run inside Travis build server.");

            var path = Path.Combine(SolutionDirectory.ToString(), "_autogenerated.txt");
            using (var file = new StreamWriter(path, false)){ 
                file.WriteLine("autogenerated at " + DateTime.UtcNow.ToString("f", CultureInfo.InvariantCulture));
                file.WriteLine($"git commit {GitVersion.BranchName} {GitVersion.Sha} at {GitVersion.CommitDate}");
            }
            
        });
}

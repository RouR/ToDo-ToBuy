##https://medium.com/@gokulc/setting-up-nginx-ingress-on-kubernetes-2b733d8d2f45
##https://www.nginx.com/blog/nginx-plus-ingress-controller-kubernetes-load-balancing/
##https://github.com/nginxinc/kubernetes-ingress/tree/master/examples/customization
#https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/
#https://github.com/kubernetes/ingress-nginx/tree/master/deploy
#https://github.com/kubernetes/contrib/issues/1535
#minikube addons disable ingress

# https://github.com/kubernetes/ingress-nginx/blob/master/deploy/mandatory.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx
    
---    



kind: ConfigMap
apiVersion: v1
data:
# https://github.com/jcmoraisjr/ingress#source-ip-address
  enable-vts-status: "true"
  # disable hsts for staging only
  # chrome://net-internals/#hsts 
  hsts: "false"
  ssl-redirect: "false"
#  forwarded-for-header: "X-Real-IP"
#  compute-full-forwarded-for: "true"
#  use-proxy-protocol: "true"
#  X-Different-Name: "true"
#  X-Request-Start: t=${msec}
#  X-Using-Nginx-Controller: "true"
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app: ingress-nginx    
---    


apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true' 
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:        
        - name: nginx-ingress-controller
          # https://github.com/kubernetes/ingress-nginx/releases
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
          args:
            - /nginx-ingress-controller            
            - --configmap=$(POD_NAMESPACE)/nginx-configuration --v=3
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            
        - name: telegraf-metrics
          image: telegraf:1.5.1
          command: ["telegraf"]
          args: [" --config /var/mapconfig/telegraf.conf"]
          env:
            - name: POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INFLUXDBURL
              value: http://monitoring-influxdb.kube-system:8086/
            - name: NGINXURL
              value: http://localhost:10254/metrics              
          volumeMounts:
            - name: config-volume-telegraf
              mountPath: /etc/telegraf
          
      volumes:
          - name: config-volume-telegraf
            configMap:
            #https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
            #ls /var/mapconfig
                name: telegraf-config      
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: ingress-nginx
data:
#kubectl -n ingress-nginx exec -ti nginx-ingress-controller-545b9df67-5chkz --container telegraf-metrics -- /bin/bash 
#curl http://127.0.0.1:10254/metrics
#curl http://localhost:18080/nginx_status

  telegraf.conf: |
    [global_tags]  
      #pod = "$POD"
    [agent]
      interval = "1s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      #debug = true
      #quiet = false
      logfile = ""
      #hostname = "tele13-verup"
      #omit_hostname = false
    [[outputs.influxdb]]
      #http://127.0.0.1/?test=testtest
      #urls = ["$INFLUXDBURL"] 
      urls = ["http://monitoring-influxdb.kube-system:8086/"] 
      database = "telegraf" 
      retention_policy = ""
      write_consistency = "any"
      timeout = "5s"
      username = "telegraf"
      password = "telegraf"
      precision = "s"      
    [[inputs.httpjson]]
      servers  = ["http://localhost:18080/nginx_status/format/json"]
      response_timeout = "5s"
    [[inputs.prometheus]]
      ## An array of Nginx stub_status URI to gather stats. http://localhost/server_status
      #urls = ["NGINXURL"]
      urls = ["http://localhost:10254/metrics"]
      ## Optional SSL Config
      # ssl_ca = "/etc/telegraf/ca.pem"
      # ssl_cert = "/etc/telegraf/cert.pem"
      # ssl_key = "/etc/telegraf/key.pem"
      ## Use SSL but skip chain & host verification
      # insecure_skip_verify = false
      ## HTTP response timeout (default: 5s)
      response_timeout = "5s" 
      # Read metrics about cpu usage
    # Read metrics about cpu usage
    [[inputs.cpu]]
      ## Whether to report per-cpu stats or not
      percpu = true
      ## Whether to report total system cpu stats or not
      totalcpu = true
      ## Comment this line if you want the raw CPU time metrics
      fielddrop = ["time_*"]
    # Read metrics about disk usage by mount point
    [[inputs.disk]]
      ## By default, telegraf gather stats for all mountpoints.
      ## Setting mountpoints will restrict the stats to the specified mountpoints.
      # mount_points = ["/"]
      ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
      ## present on /run, /var/run, /dev/shm or /dev).
      ignore_fs = ["tmpfs", "devtmpfs"]
    # Read metrics about disk IO by device
    [[inputs.diskio]]
      ## By default, telegraf will gather stats for all devices including
      ## disk partitions.
      ## Setting devices will restrict the stats to the specified devices.
      # devices = ["sda", "sdb"]
      ## Uncomment the following line if you need disk serial numbers.
      # skip_serial_number = false
    # Get kernel statistics from /proc/stat
    [[inputs.kernel]]
      # no configuration
    # Read metrics about memory usage
    [[inputs.mem]]
      # no configuration
    # Get the number of processes and group them by status
    [[inputs.processes]]
      # no configuration
    # Read metrics about swap memory usage
    [[inputs.swap]]
      # no configuration
    # Read metrics about system load & uptime
    [[inputs.system]]
      # no configuration
    # Read metrics about network interface usage
    [[inputs.net]]
      # collect data only about specific interfaces
      # interfaces = ["eth0"]
    [[inputs.netstat]]
      # no configuration
    [[inputs.interrupts]]
      # no configuration
    [[inputs.linux_sysctl_fs]]
      # no configuration

      
      
---



 
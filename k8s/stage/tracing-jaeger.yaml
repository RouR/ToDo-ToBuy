# https://github.com/jaegertracing/jaeger-kubernetes
# UI (Services -> jaeger-query  Internal endpoints jaeger-query.dev:31778 TCP) http://____:31778/search # admin PASSWORD 

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: dev
  name: jaeger-configuration
  labels:
    app: jaeger
    jaeger-infra: configuration
data:
  span-storage-type: cassandra
  collector: |
    collector:      
      zipkin:
        http-port: 9411
    cassandra:
      servers: cassandra
      keyspace: jaeger_v1_dc1
  query: |
    cassandra:
      servers: cassandra
      keyspace: jaeger_v1_dc1
    query:
      static-files: /go/jaeger-ui/
  agent: |
    collector:
      host-port: "jaeger-collector:14267"
      
      
---



  apiVersion: v1
  kind: Service
  metadata:
    namespace: dev
    name: cassandra
    labels:
      app: jaeger
      name: jaeger-cassandra-service
      jaeger-infra: cassandra-service
  spec:
    ports:
    - port: 7000
      name: intra-node
    - port: 7001
      name: tls-intra-node
    - port: 7199
      name: jmx
    - port: 9042
      name: cql
    - port: 9160
      name: thrift
    clusterIP: None
    selector:
      app: cassandra
---
  apiVersion: "apps/v1beta1"
  kind: StatefulSet
  metadata:
    namespace: dev
    name: cassandra
    labels:
      app: jaeger
      jaeger-infra: cassandra-statefulset
  spec:
    serviceName: cassandra
    replicas: 1
    template:
      metadata:
        namespace: dev
        labels:
          app: cassandra
          jaeger-infra: cassandra-replica
      spec:
        terminationGracePeriodSeconds: 1800
        containers:
        - name: cassandra
          image: cassandra:3.11
          command:
          - /docker-entrypoint.sh
          - "-R"
          ports:
          - containerPort: 7000
            name: intra-node
          - containerPort: 7001
            name: tls-intra-node
          - containerPort: 7199
            name: jmx
          - containerPort: 9042
            name: cql
          - containerPort: 9160
            name: thrift
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "nodetool drain"]
          env:
            - name: MAX_HEAP_SIZE
              value: 512M
            - name: HEAP_NEWSIZE
              value: 100M
            - name: CASSANDRA_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_CLUSTER_NAME
              value: "jaeger"
            - name: CASSANDRA_DC
              value: "dc1"
            - name: CASSANDRA_RACK
              value: "rack1"
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: "GossipingPropertyFileSnitch"
            - name: CASSANDRA_SEEDS
              value: cassandra-0.cassandra
          volumeMounts:
          - name: cassandra-data
            mountPath: /var/lib/cassandra
          - name: cassandra-logs
            mountPath: /var/log/cassandra
        volumes:
        - name: cassandra-data
          emptyDir: {}
        - name: cassandra-logs
          emptyDir: {}
---
  apiVersion: batch/v1
  kind: Job
  metadata:
    namespace: dev
    name: jaeger-cassandra-schema-job
    labels:
      app: jaeger
      jaeger-infra: cassandra-schema-job
  spec:
    activeDeadlineSeconds: 120
    template:
      metadata:
        name: cassandra-schema
      spec:
        containers:
        - name: jaeger-cassandra-schema
          image: jaegertracing/jaeger-cassandra-schema:1.2
          env:
            - name: MODE
              value: "prod"
            - name: DATACENTER
              value: "dc1"
        restartPolicy: OnFailure


---      




---
  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    namespace: dev
    name: jaeger-collector
    labels:
      app: jaeger
      jaeger-infra: collector-deployment
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: jaeger
          jaeger-infra: collector-pod
      spec:
        containers:
        - image: jaegertracing/jaeger-collector:1.2
          name: jaeger-collector
          command:
            - "/go/bin/collector-linux"
            - "--config-file=/conf/collector.yaml"
            - "--log-level=debug"
          ports:
          - containerPort: 14267
            protocol: TCP
          - containerPort: 14268
            protocol: TCP
          - containerPort: 9411
            protocol: TCP
          volumeMounts:
          - name: jaeger-configuration-volume
            mountPath: /conf
          env:
          - name: SPAN_STORAGE_TYPE
            valueFrom:
              configMapKeyRef:
                name: jaeger-configuration
                key: span-storage-type
        volumes:
          - configMap:
              name: jaeger-configuration
              items:
                - key: collector
                  path: collector.yaml
            name: jaeger-configuration-volume
---
  apiVersion: v1
  kind: Service
  metadata:
    namespace: dev
    name: jaeger-collector
    labels:
      app: jaeger
      jaeger-infra: collector-service
  spec:
    ports:
    - name: jaeger-collector-tchannel
      port: 14267
      protocol: TCP
      targetPort: 14267
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      jaeger-infra: collector-pod
    type: ClusterIP
---
  apiVersion: v1
  kind: Service
  metadata:
    namespace: dev
    name: zipkin
    labels:
      app: jaeger
      jaeger-infra: zipkin-service
  spec:
    ports:
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      jaeger-infra: collector-pod
    type: ClusterIP
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: jaeger-nginx-conf
  namespace: dev
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  nginx.conf: |-
    worker_processes auto;
    daemon off;
    error_log /dev/stderr info;
    events {
      worker_connections 1024;
    }
    http {
      access_log /dev/stdout;
      include /etc/nginx/mime.types;
      gzip on;
      gzip_disable "msie6";
      gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml image/jpeg image/png;
      set_real_ip_from 192.168.0.0/16;
      set_real_ip_from 10.0.0.0/8;
      set_real_ip_from 172.16.0.0/12;
      server {
        server_name _;
        listen 80;
        location / {
          auth_basic "Authrentication Required";
          auth_basic_user_file /nginx/passwd/auth;
          proxy_redirect      off;
          proxy_set_header    Host          $http_host;
          proxy_set_header    X-Real-Ip     $remote_addr;
          proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_pass http://127.0.0.1:16686;
        }
      }
    } 
---

apiVersion: v1
data:
# command: echo "PASSWORD" | htpasswd -ni admin | base64 -w0
# result: YWRtaW46JGFwcjEkMzdxSEwvTVIkcEFvdzEzZDUwMkd5VFc2VDNlQmJiMAoK
  auth: "YWRtaW46JGFwcjEkelhESkU5YTkkRkU0OFdnZlBMZlJJQjk0bVhXZVprMAoK"
kind: Secret
metadata:
  name: basic-auth-jaeger
  namespace: dev
type: Opaque
---
  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    namespace: dev
    name: jaeger-query
    labels:
      app: jaeger
      jaeger-infra: query-deployment
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        namespace: dev
        labels:
          app: jaeger
          jaeger-infra: query-pod
      spec:
        containers:
        - image: jaegertracing/jaeger-query:1.2
          name: jaeger-query
          command:
            - "/go/bin/query-linux"
            - "--config-file=/conf/query.yaml"
          ports:
          - containerPort: 16686
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/"
              port: 16686
          volumeMounts:
          - name: jaeger-configuration-volume
            mountPath: /conf
          env:
          - name: SPAN_STORAGE_TYPE
            valueFrom:
              configMapKeyRef:
                name: jaeger-configuration
                key: span-storage-type
        - name: frontend
          image: nginx:alpine
          command: ["/usr/sbin/nginx"]
          ports:
          - name: http
            containerPort: 80        
          volumeMounts:
          - name: basic-auth-jaeger
            mountPath: "/nginx/passwd"
            readOnly: true
          - name: nginx-conf-jaeger
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
        volumes:
          - configMap:
              name: jaeger-configuration
              items:
                - key: query
                  path: query.yaml
            name: jaeger-configuration-volume
          - name: basic-auth-jaeger
            secret:
              secretName: basic-auth-jaeger
          - name: nginx-conf-jaeger
            configMap:
              name: jaeger-nginx-conf
---
  apiVersion: v1
  kind: Service
  metadata:
    namespace: dev
    name: jaeger-query
    labels:
      app: jaeger
      jaeger-infra: query-service
  spec:
    ports:
    - name: jaeger-query
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      jaeger-infra: query-pod
    type: LoadBalancer
---
  apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    namespace: dev
    name: jaeger-agent
    labels:
      app: jaeger
      jaeger-infra: agent-daemonset
  spec:
    template:
      metadata:
        labels:
          namespace: dev
          app: jaeger
          jaeger-infra: agent-instance
      spec:
        containers:
        - name: agent-instance
          image: jaegertracing/jaeger-agent:1.2
          command:
          - "/go/bin/agent-linux"
          - "--config-file=/conf/agent.yaml"
          volumeMounts:
          - name: jaeger-configuration-volume
            mountPath: /conf
          ports:
          - containerPort: 5775
            protocol: UDP
          - containerPort: 6831
            protocol: UDP
          - containerPort: 6832
            protocol: UDP
        hostNetwork: true
        dnsPolicy: ClusterFirstWithHostNet
        volumes:
          - configMap:
              name: jaeger-configuration
              items:
                - key: agent
                  path: agent.yaml
            name: jaeger-configuration-volume